#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MasterPageExample
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="gestion")]
	public partial class DCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void Insertcategorie(categorie instance);
    partial void Updatecategorie(categorie instance);
    partial void Deletecategorie(categorie instance);
    partial void Insertarticles(articles instance);
    partial void Updatearticles(articles instance);
    partial void Deletearticles(articles instance);
    partial void Insertcommande(commande instance);
    partial void Updatecommande(commande instance);
    partial void Deletecommande(commande instance);
    partial void Insertt_user(t_user instance);
    partial void Updatet_user(t_user instance);
    partial void Deletet_user(t_user instance);
    #endregion
		
		public DCDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["gestionConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<categorie> categorie
		{
			get
			{
				return this.GetTable<categorie>();
			}
		}
		
		public System.Data.Linq.Table<articles> articles
		{
			get
			{
				return this.GetTable<articles>();
			}
		}
		
		public System.Data.Linq.Table<commande> commande
		{
			get
			{
				return this.GetTable<commande>();
			}
		}
		
		public System.Data.Linq.Table<t_user> t_user
		{
			get
			{
				return this.GetTable<t_user>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.categorie")]
	public partial class categorie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _nom_categorie;
		
		private string _descrption;
		
		private EntitySet<articles> _articles;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Onnom_categorieChanging(string value);
    partial void Onnom_categorieChanged();
    partial void OndescrptionChanging(string value);
    partial void OndescrptionChanged();
    #endregion
		
		public categorie()
		{
			this._articles = new EntitySet<articles>(new Action<articles>(this.attach_articles), new Action<articles>(this.detach_articles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom_categorie", DbType="VarChar(50)")]
		public string nom_categorie
		{
			get
			{
				return this._nom_categorie;
			}
			set
			{
				if ((this._nom_categorie != value))
				{
					this.Onnom_categorieChanging(value);
					this.SendPropertyChanging();
					this._nom_categorie = value;
					this.SendPropertyChanged("nom_categorie");
					this.Onnom_categorieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descrption", DbType="VarChar(255)")]
		public string descrption
		{
			get
			{
				return this._descrption;
			}
			set
			{
				if ((this._descrption != value))
				{
					this.OndescrptionChanging(value);
					this.SendPropertyChanging();
					this._descrption = value;
					this.SendPropertyChanged("descrption");
					this.OndescrptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="categorie_articles", Storage="_articles", ThisKey="Id", OtherKey="categorie_id")]
		public EntitySet<articles> articles
		{
			get
			{
				return this._articles;
			}
			set
			{
				this._articles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_articles(articles entity)
		{
			this.SendPropertyChanging();
			entity.categorie = this;
		}
		
		private void detach_articles(articles entity)
		{
			this.SendPropertyChanging();
			entity.categorie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.articles")]
	public partial class articles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _nom_article;
		
		private System.Nullable<int> _prix_unitaire;
		
		private string _descreption;
		
		private System.Nullable<int> _categorie_id;
		
		private EntitySet<commande> _commande;
		
		private EntityRef<categorie> _categorie;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Onnom_articleChanging(string value);
    partial void Onnom_articleChanged();
    partial void Onprix_unitaireChanging(System.Nullable<int> value);
    partial void Onprix_unitaireChanged();
    partial void OndescreptionChanging(string value);
    partial void OndescreptionChanged();
    partial void Oncategorie_idChanging(System.Nullable<int> value);
    partial void Oncategorie_idChanged();
    #endregion
		
		public articles()
		{
			this._commande = new EntitySet<commande>(new Action<commande>(this.attach_commande), new Action<commande>(this.detach_commande));
			this._categorie = default(EntityRef<categorie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom_article", DbType="VarChar(50)")]
		public string nom_article
		{
			get
			{
				return this._nom_article;
			}
			set
			{
				if ((this._nom_article != value))
				{
					this.Onnom_articleChanging(value);
					this.SendPropertyChanging();
					this._nom_article = value;
					this.SendPropertyChanged("nom_article");
					this.Onnom_articleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prix_unitaire", DbType="Int")]
		public System.Nullable<int> prix_unitaire
		{
			get
			{
				return this._prix_unitaire;
			}
			set
			{
				if ((this._prix_unitaire != value))
				{
					this.Onprix_unitaireChanging(value);
					this.SendPropertyChanging();
					this._prix_unitaire = value;
					this.SendPropertyChanged("prix_unitaire");
					this.Onprix_unitaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descreption", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string descreption
		{
			get
			{
				return this._descreption;
			}
			set
			{
				if ((this._descreption != value))
				{
					this.OndescreptionChanging(value);
					this.SendPropertyChanging();
					this._descreption = value;
					this.SendPropertyChanged("descreption");
					this.OndescreptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categorie_id", DbType="Int")]
		public System.Nullable<int> categorie_id
		{
			get
			{
				return this._categorie_id;
			}
			set
			{
				if ((this._categorie_id != value))
				{
					if (this._categorie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncategorie_idChanging(value);
					this.SendPropertyChanging();
					this._categorie_id = value;
					this.SendPropertyChanged("categorie_id");
					this.Oncategorie_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="articles_commande", Storage="_commande", ThisKey="Id", OtherKey="article_id")]
		public EntitySet<commande> commande
		{
			get
			{
				return this._commande;
			}
			set
			{
				this._commande.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="categorie_articles", Storage="_categorie", ThisKey="categorie_id", OtherKey="Id", IsForeignKey=true)]
		public categorie categorie
		{
			get
			{
				return this._categorie.Entity;
			}
			set
			{
				categorie previousValue = this._categorie.Entity;
				if (((previousValue != value) 
							|| (this._categorie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._categorie.Entity = null;
						previousValue.articles.Remove(this);
					}
					this._categorie.Entity = value;
					if ((value != null))
					{
						value.articles.Add(this);
						this._categorie_id = value.Id;
					}
					else
					{
						this._categorie_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("categorie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_commande(commande entity)
		{
			this.SendPropertyChanging();
			entity.articles = this;
		}
		
		private void detach_commande(commande entity)
		{
			this.SendPropertyChanging();
			entity.articles = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.commande")]
	public partial class commande : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _nom_commande;
		
		private System.Nullable<int> _quantite_article;
		
		private System.Nullable<System.DateTime> _date_commande;
		
		private System.Nullable<int> _article_id;
		
		private EntityRef<articles> _articles;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Onnom_commandeChanging(string value);
    partial void Onnom_commandeChanged();
    partial void Onquantite_articleChanging(System.Nullable<int> value);
    partial void Onquantite_articleChanged();
    partial void Ondate_commandeChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_commandeChanged();
    partial void Onarticle_idChanging(System.Nullable<int> value);
    partial void Onarticle_idChanged();
    #endregion
		
		public commande()
		{
			this._articles = default(EntityRef<articles>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom_commande", DbType="VarChar(50)")]
		public string nom_commande
		{
			get
			{
				return this._nom_commande;
			}
			set
			{
				if ((this._nom_commande != value))
				{
					this.Onnom_commandeChanging(value);
					this.SendPropertyChanging();
					this._nom_commande = value;
					this.SendPropertyChanged("nom_commande");
					this.Onnom_commandeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantite_article", DbType="Int")]
		public System.Nullable<int> quantite_article
		{
			get
			{
				return this._quantite_article;
			}
			set
			{
				if ((this._quantite_article != value))
				{
					this.Onquantite_articleChanging(value);
					this.SendPropertyChanging();
					this._quantite_article = value;
					this.SendPropertyChanged("quantite_article");
					this.Onquantite_articleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_commande", DbType="DateTime")]
		public System.Nullable<System.DateTime> date_commande
		{
			get
			{
				return this._date_commande;
			}
			set
			{
				if ((this._date_commande != value))
				{
					this.Ondate_commandeChanging(value);
					this.SendPropertyChanging();
					this._date_commande = value;
					this.SendPropertyChanged("date_commande");
					this.Ondate_commandeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_article_id", DbType="Int")]
		public System.Nullable<int> article_id
		{
			get
			{
				return this._article_id;
			}
			set
			{
				if ((this._article_id != value))
				{
					if (this._articles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onarticle_idChanging(value);
					this.SendPropertyChanging();
					this._article_id = value;
					this.SendPropertyChanged("article_id");
					this.Onarticle_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="articles_commande", Storage="_articles", ThisKey="article_id", OtherKey="Id", IsForeignKey=true)]
		public articles articles
		{
			get
			{
				return this._articles.Entity;
			}
			set
			{
				articles previousValue = this._articles.Entity;
				if (((previousValue != value) 
							|| (this._articles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._articles.Entity = null;
						previousValue.commande.Remove(this);
					}
					this._articles.Entity = value;
					if ((value != null))
					{
						value.commande.Add(this);
						this._article_id = value.Id;
					}
					else
					{
						this._article_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("articles");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.t_user")]
	public partial class t_user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _username;
		
		private string _pwd;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpwdChanging(string value);
    partial void OnpwdChanged();
    #endregion
		
		public t_user()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(20)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pwd", DbType="VarChar(20)")]
		public string pwd
		{
			get
			{
				return this._pwd;
			}
			set
			{
				if ((this._pwd != value))
				{
					this.OnpwdChanging(value);
					this.SendPropertyChanging();
					this._pwd = value;
					this.SendPropertyChanged("pwd");
					this.OnpwdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
